/*1. Take a list, say for example this one:
 a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
 and write a program that prints out all the elements of the list that are less than 5.
*/
void main() {
 List a=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
     for (int i in a){if (i<5){
    print(i);
     }
   }
}


/*2. Take two lists, for example:
 a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between them (without duplicates). Make sure your program works on two lists of different sizes.
*/
void main() {
  List a=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
  List b=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];

  Set<int> newset = {};

  for (int element in a) {
    if (b.contains(element)) {
      newset.add(element);
    }
  }

  List<int> result = newset.toList();

  print(result);
}


/*3. Write a program to check if a string is a palindrome or not.
A palindrome is a string that reads the same forwards and backwards. Eg mum
*/
bool isPalindrome(String str) {
  String cleanedStr = str.replaceAll(RegExp(r'[^a-zA-Z]'), '').toLowerCase();
  String reversedStr = cleanedStr.split('').reversed.join('');
  return cleanedStr == reversedStr;
}

void main() {
  String inputString ="mum";

  if (isPalindrome(inputString)) {
    print("$inputString is a palindrome.");
  } else {
    print("$inputString is not a palindrome.");
  }
}


/*4. Write a program that takes a list of numbers for example
a = [5, 10, 15, 20, 25]
and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.*/
List<int> extractFirstAndLast(List<int> inputList) {

  List<int> result = [];
  result.add(inputList.first);
  result.add(inputList.last);
  return result;
}

void main() {
  List<int> a=[5, 10, 15, 20, 25];

    List<int> newList = extractFirstAndLast(a);
  print (newList);
}





5. Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string, except with the words in backwards order.
For example, say I type the string:
 My name is Michele


Then I would see the string:
 Michele is name My

import 'dart:io';

String reverseWordsOrder(String inputString) {
  List<String> words = inputString.split(' ');
  return words.reversed.join(' ');
}

void main() {
  print("Enter a long string containing multiple words:");
  String userInput = stdin.readLineSync();

  String reversedString = reverseWordsOrder(userInput);
  print("Reversed string: $reversedString");
}



6. Write a program (function) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.
List<T> removeDuplicates<T>(List<T> inputList) {
  Set<T> uniqueElements = {};
  List<T> result = [];

  for (T element in inputList) {
    if (!uniqueElements.contains(element)) {
      uniqueElements.add(element);
      result.add(element);
    }
  }

  return result;
}

void main() {
  List<int> inputList=[1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7];
  List<int> result = removeDuplicates(inputList);

  print("Original list: $inputList");
  print("No Duplicate List: $result");
}


7. In this exercise, load that JSON file from disk, 
a, Extract the months of all the birthdays.
B, count how many birthdays in each month.
{
    "May": 3,
    "May": 5,
    "November": 2,
    "December": 1,
    "December": 4,
    "December": 2,
}